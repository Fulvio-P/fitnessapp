OPEN FOOD FACTS
    Database che contiene ingredienti e stat nutrizionali di prodotti confezionati.
    È indicizzato per codice a barre.

    Endpoint API: https://world.openfoodfacts.org/api/v0/product/[barcode].json
    Tipo di risposta: JSON

    Sito di riferimento: https://world.openfoodfacts.org/data
    Documentazione: nulla

    Proprietà da usare: product.nutriments (contiene le stat nutrizionali)
    Altre:  product.nutriscore_data (ancora stat nutrizionali)
            product.nutrition_data_per (dovrebbe dare l'unità di misura rispetto alla quale sono date le stat nutrizionali)

    Altra roba che quest'API può fare:
        Lista degli ingredienti. La lingua non è garantita.
        Spulciando tra i tag si potrebbero trovare un po' di allergeni e altra roba.

    Nota: chiedono che a ogni chiamata API corrisponda una scansione reale di un utente.
        Se intendiamo usare quest'api semplicemente come "utente, dimmi che hai mangiato
        e ti dico quanta roba hai preso" DOVREBBE andare bene, ma se la usiamo più frequentemente
        di così ci conviene cachare i risultati nel DB.
        Questo da un punto di vista realistico, almeno...
    
    Nota: senza ulteriori tecnologie, i codici a barre andrebbero letti dalla confezione
        e digitati a mano nella nostra barra di ricerca.
        Nulla di improponibile, per carità, ma se mai volessimo rendere la cosa
        un filino più user-friendly abbiamo un paio di alternative:
        1. Trovare il modo di scansionare codici a barre (API web?)
        2. Salvare i prodotti recenti di un utente in modo che le volte successive possa scegliere tra quelli
        (3. Mettere su un listone dei prodotti più mainstream e permettere all'utente di cercare tra quelli... ma mi sembra improponibile per noi)


EDAMAM
    In realtà ha 3 API diverse che tratta separatamente (pure a livello di account),
    quindi le tratterò separatamente anch'io.

    Nota: non ho ancora fatto un account per testarle, per ora sto solo riportando
        la documentazione che mi sembra abbastanza descrittiva.


EDAMAM - DATABASE CIBO
    Database di informazioni nutrizionali di cibi generici e di marca,
    accessibile via query testuale (o codice a barre).
    La modalità "food logging" praticamente permette all'utente di scrivere
    "oggi ho mangiato pasta" e ricevere le stat nutrizionali del suo pasto.
    Non so come se la cavi a gestire più di 1~2 ingredienti,
    ma è semplice da usare.

    Modo d'uso: prima fare una richiesta al Parser per ottenere risultati dal DB,
        poi passare quei risultati al Nutrients per ottenere i dati di una
        quantità specifica.
    Tipo di risposta: JSON

    Documentazione: https://developer.edamam.com/food-database-api-docs

    Limiti: 10 richieste/minuto
    Dettagli: https://developer.edamam.com/food-database-api

    Nota: va da sé che l'api accetta solo testo in inglese, se vogliamo usare
        questa funzionalità suggerisco di renderlo chiaro, magari facendo
        l'intero sito in inglese (ma non a costo della credibilità)


EDAMAM - ANALISI NUTRIZIONALE
    Analizza una ricetta completa (o solo un ingrediente) e ne restituisce
    le info nutrizionali. Molto completa, ma difficile da usare,
    sia per l'utente (che deve sapere la ricetta esatta)
    che per lo sviluppatore (c'è un po' di lavoro da fare dietro le quinte
    e le richieste sono limitate al mese)

    Modo d'uso: Richiesta POST all'endpoint opportuno
    Tipo di risposta: JSON

    Documentazione: https://developer.edamam.com/edamam-docs-nutrition-api

    Limiti: 200 ricette/MESE (!!!)
    Dettagli: https://developer.edamam.com/edamam-nutrition-api

    Nota: L'api ha due modalità: una per ricette complete e una per singole righe.
        Sembra vengano trattate separatamente. (?)
    
    Nota: L'api usa il meccanismo degli Etag HTTP per evitare di farti pagare più
        volte la stessa richiesta. Sta tutto scritto nella documentazione,
        ma praticamente quando fai una richiesta ti danno un Etag nell'header
        di risposta che poi devi rimandare ogni volta che fai la stessa richiesta
        per evitare di pagarla ogni volta.
        Oppure semplicemente cachamo la risposta...


EDAMAM - RICERCA RICETTE
    La trovo poco utile


WGER
    Permette di gestire agende di allenamento, e di nutrizione,
    nonché di mantenere una storia del proprio peso.

    Endpoint API: https://wger.de/api/v2/
    Tipo di risposta: JSON

    Sito di riferimento: https://wger.de/en/software/api
    Documentazione: vd. sopra

    Nota: mi preoccupa l'autenticazione. Con un account si può gestire
        una persona sola, e non ho trovato alcun supporto OAuth per permettere
        a ciascun utente di avere un proprio account in maniera sicura.
        In più, molte delle cose che fa questo può farle anche Google Fit.


GOOGLE FIT
    Prevedibilmente, ha un sacco di funzioni e supporta OAuth. Non mi metterò a
    elencarle tutte perché per quello c'è la documentazione, magari mi limito
    a fare un riassunto di come si usa.

    Alcune funzioni:
        Storia di peso e altezza
        Inserimento di pasti e grandezze nutrizionali contestualmente acquisite
        Inserimento attività svolte

    Endpoint API: https://www.googleapis.com/fitness/v1/[resourcePath]?[parameters]
    Tipo di risposta: JSON

    Documentazione: https://developers.google.com/fit/overview

    Modo d'uso:
        0.  Configurazione OAuth. Dubito sia molto diverso da quanto detto a lezione.
        1.  Tutti i dati acquisiti devono essere in riferimento a una "Data Source".
            Ho l'impressione che di solito sarebbe un sensore,
            noi dovremo affidarci alla parola d'onore dell'utente.
            La DS va creata con una chiamata POST a /users/me/DataSources.
        2.  Aggiungere un dataset.
            Un dataset rappresenta i dati che andiamo effettivamente a salvare.
            Chiamata PATCH a /users/me/DataSources/[id DS]/datasets/[inizio]-[fine],
            dove [inizio] e [fine] sono timestamp in nanosecondi.
            Alcune misurazioni istantanee richiedono soltanto [fine].
        
        Questa era la parte base, ci si potrebbe anche fermare qui.
        Poi vengono i metadati di abbellimento:

        3.  Creare una sessione, che non è altro che un'etichetta carina
            su un intervallo di tempo che delle app possono usare.
            Chiamata PUT a /users/me/sessions/[sessionId].
        4.  Creare segmenti di attività, per identificare meglio quali attività
            sono state svolte nel corso di una sessione.
            Chiamata PATCH come al punto 2.
        
        Per leggere invece ci sono due opzioni:
         - Lettura dati diretta
         - Lettura aggregata facendo riferimento alla DS





...........




STRAVA
    Lo scrivo qui solo perché l'ho trovato oggi pomeriggio e non voglio dimenticarmene
    completamente, sembra essere una specie di social network per atleti in cui la gente
    pubblica le attività svolte con dispositivi wearable e queste vengono complementate con
    informazioni tipo calorie bruciate, il tutto con una componente social.

    Ci servirà? Probabilmente no, lo segno solo perché è potenzialmente rilevante
    e non voglio dimenticarlo.


